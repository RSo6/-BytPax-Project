// <auto-generated />
using System;
using BytPax.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BytPax.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250519165902_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BytPax.Models.core.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BytPax.Models.Article", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<string>("BodyText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CategoryId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("CategoryId")
                                .HasColumnName("Article_CategoryId");

                            t.Property("ImagePath")
                                .HasColumnName("Article_ImagePath");
                        });

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("BytPax.Models.Athlete", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CategoryId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("CategoryId")
                                .HasColumnName("Athlete_CategoryId");

                            t.Property("Description")
                                .HasColumnName("Athlete_Description");
                        });

                    b.HasDiscriminator().HasValue("Athlete");
                });

            modelBuilder.Entity("BytPax.Models.Category", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOfSport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Category_Description");

                            t.Property("Name")
                                .HasColumnName("Category_Name");
                        });

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("BytPax.Models.HistoricalEvent", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<int>("ImportanceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("SportId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("HistoricalEvent_Description");

                            t.Property("SportId")
                                .HasColumnName("HistoricalEvent_SportId");
                        });

                    b.HasDiscriminator().HasValue("HistoricalEvent");
                });

            modelBuilder.Entity("BytPax.Models.RecordHistory", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<string>("AthleteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecordDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RecordValue")
                        .HasColumnType("double precision");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("RecordHistory");
                });

            modelBuilder.Entity("BytPax.Models.Sport", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OriginYear")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Sport");
                });

            modelBuilder.Entity("BytPax.Models.core.User", b =>
                {
                    b.HasBaseType("BytPax.Models.core.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("FullName")
                                .HasColumnName("User_FullName");

                            t.Property("ImagePath")
                                .HasColumnName("User_ImagePath");
                        });

                    b.HasDiscriminator<string>("RoleType");
                });

            modelBuilder.Entity("BytPax.Models.AdminUser", b =>
                {
                    b.HasBaseType("BytPax.Models.core.User");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("FullName")
                                .HasColumnName("User_FullName");

                            t.Property("ImagePath")
                                .HasColumnName("User_ImagePath");
                        });

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("BytPax.Models.RegularUser", b =>
                {
                    b.HasBaseType("BytPax.Models.core.User");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("FullName")
                                .HasColumnName("User_FullName");

                            t.Property("ImagePath")
                                .HasColumnName("User_ImagePath");
                        });

                    b.HasDiscriminator().HasValue("Visitor");
                });

            modelBuilder.Entity("BytPax.Models.Article", b =>
                {
                    b.HasOne("BytPax.Models.Category", null)
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BytPax.Models.Athlete", b =>
                {
                    b.HasOne("BytPax.Models.Category", "Category")
                        .WithMany("Athletes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BytPax.Models.HistoricalEvent", b =>
                {
                    b.HasOne("BytPax.Models.Sport", null)
                        .WithMany("HistoricalEvents")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BytPax.Models.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("BytPax.Models.Sport", b =>
                {
                    b.Navigation("HistoricalEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
